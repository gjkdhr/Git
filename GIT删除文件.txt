说一说，git如何删除一个文件。
假设git现在管理着一个活动目录的文件，
现在有一个文件install.log,我们想把它给干掉。

假如我们直接用rm -rf 将该文件或者目录删除了之后，
来看看状态。
[root@test1 git]# rm -rf install.log 
[root@test1 git]# git status
# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#
# Changed but not updated:
#   (use "git add/rm <file>..." to update what will be committed) 用git rm 来删除。
#   (use "git checkout -- <file>..." to discard changes in working directory)	如果你是误删，就用这条命令撤销把
#
#	deleted:    install.log
#

现在该文件的状态显示delete，
如果你是误操作，那就通过git checkout -- FILE 来撤销该操作吧。
[root@test1 git]# git checkout -- install.log
[root@test1 git]# git status
# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#


但其实这样只是将工作区的该文件给删除了。
而在版本库中依然保存着该文件的相关信息，如果想一次性删除，
上面提示用git rm FILE 来删除，

[root@test1 git]# git rm  install.log 
rm 'install.log'
[root@test1 git]# git status
# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#
# Changes to be committed:	该删除操作还未提交
#   (use "git reset HEAD <file>..." to unstage)
#
#	deleted:    install.log
用git rm FILE删除的文件，如果是误删的话，依然能够恢复。用git reset HEAD file

确定删除之后，就提交删除吧。
[root@test1 git]# git commit -m "delete the file install.log" 
[master ab132d2] delete the file install.log
 1 files changed, 0 insertions(+), 624 deletions(-)
 delete mode 100644 install.log
[root@test1 git]# git status
# On branch master
# Your branch is ahead of 'origin/master' by 2 commits.

