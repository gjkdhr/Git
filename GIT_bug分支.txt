在编写代码的时候，测试经常出现各种bug，这是很正常的。
如何修复bug呢？

当我们在主分支master上发现了bug，首先想到的是新建一个bug解决分支。
然后对代码进行修改，并进行测试。
如果bug解决了之后，我们会在该代码的主分支上进行合并。


但是你当前正在开发一个新功能feature，你的代码还没有写完，还没法提交。
如果切换分支的话，会被拒绝。因为git需要你提交了本次修改才能够切换分支。
你看，我修改了test.txt 但是我不提交的话，它不让我切换分支

现在的问题是，你需要从当前的feature跳到master,然后在master分支上创建bug-110分支
然后再分支上对文件进行修改。
修改bug完成之后，你就可以切换到master主分支上对bug-110分支进行合并。

合并完成后，你就可以切换到feature分支下，进行代码编写了。
但是，注意这块如果你在修改了master未修改bug之前的代码，
没有保存现场的话，你又得重新修改代码/

所以在feature切换到master代码之前，需要用git stash对当前的现场进行保存
当你将bug修复完成，并且在主master分支上合并完成后，切换到feature时，
用git stash来还原现场，这时，你在未修改bug之前对master分支文件的修改才会保存，
如果你没有保存现场的话，切换到其他分支下进行合并之后，你又得重新修改。

你看我现在的master分支下的文件test.txt文件内容是这样的：
[root@test1 git]# cat test.txt 
gjkdhr
add the master branch
book
qu fix the master bug
second add the branch develop
Tue Nov 17 21:36:53 CST 2015
this is feature branch add the line

当我在feature下修改了之后，现在我准备切换到master分支上去修复 bug
[root@test1 git]# cat test.txt 
gjkdhr
add the master branch
book
qu fix the master bug
hehe
second add the branch develop
Tue Nov 17 21:36:53 CST 2015
this is feature branch add the line

现在我需要保存现场。因为我在活动目录下修改了文件test.txt
我还没有修改完，所以还没有进行add并commit操作
git stash就可以保存现场了
[root@test1 git]# git stash 
Saved working directory and index state WIP on feature: 3fd1dd4 xuyao xiufu master bug
HEAD is now at 3fd1dd4 xuyao xiufu master bug  这块显示了上一个commit的id号和描述

现在我解决了bug，而且已经切换到master下进行了合并。
[root@test1 git]# cat test.txt 
gjkdhr
gjkdhr@162.com
second add the branch develop

#iInitiatorName=iqn.1994-05.com.redhat:999e8620abca
InitiatorName=iqn.2015-09.com.zbit-initiator:initiator
>>>>>>> bug-110

现在我要切换到feature，继续我的工作。
这时候，如果没有恢复现场，我的test.txt文件还显示在之前第一次切换到feature的状态。
我所做的修改都不见了。
[root@test1 git]# cat test.txt
gjkdhr
add the master branch
book
qu fix the master bug
second add the branch develop
Tue Nov 17 21:36:53 CST 2015
this is feature branch add the line

如果做了现场保存，现在就可以恢复现场了/
恢复现场前，先查看当前分支的现场列表。
你可以对一个文件保存多个现场，你也可以选择需要恢复的现场。
[root@test1 git]# git stash list
stash@{0}: WIP on feature: 3fd1dd4 xuyao xiufu master bug
stash@{1}: WIP on feature: 3fd1dd4 xuyao xiufu master bug


恢复现场有两种方式。
1，第一种事采用git stash apply 它会恢复现场，并且将保存现场的记录保留在list列表中
如果你这里有很多保存现场，你需要恢复某一个的话，只需要在apply后面加上stash@{num}
[root@test1 git]# git stash apply
# On branch feature
# Changed but not updated:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   test.txt
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	".GIT_bug\345\210\206\346\224\257.txt.swp"
no changes added to commit (use "git add" and/or "git commit -a")
[root@test1 git]# cat test.txt 
gjkdhr
add the master branch
book
qu fix the master bug
hehe
second add the branch develop
Tue Nov 17 21:36:53 CST 2015
this is feature branch add the line
second save xianchang
[root@test1 git]# git stash list
stash@{0}: WIP on feature: 3fd1dd4 xuyao xiufu master bug
stash@{1}: WIP on feature: 3fd1dd4 xuyao xiufu master bug

恢复到任意的保存现场/
[root@test1 git]# git stash apply stash@{1}  1可以变为你想恢复的现场


2，一种是直接使用git stash pop，这种恢复模式会将现场列表中最后保存的从中删除
pop具有出栈的意思。这样的话，就可以删除列表中的了。
[root@test1 git]# git stash list
stash@{0}: WIP on feature: 3fd1dd4 xuyao xiufu master bug
stash@{1}: WIP on feature: 3fd1dd4 xuyao xiufu master bug
stash@{2}: WIP on feature: 3fd1dd4 xuyao xiufu master bug
stash@{3}: WIP on feature: 3fd1dd4 xuyao xiufu master bug
[root@test1 git]# git stash pop
# On branch feature
# Changed but not updated:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#	modified:   test.txt
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	".GIT_bug\345\210\206\346\224\257.txt.swp"
no changes added to commit (use "git add" and/or "git commit -a")
Dropped refs/stash@{0} (e8734b28f59f9f7895bc944463782c478fda6ce7)
[root@test1 git]# git stash list
stash@{0}: WIP on feature: 3fd1dd4 xuyao xiufu master bug
stash@{1}: WIP on feature: 3fd1dd4 xuyao xiufu master bug
stash@{2}: WIP on feature: 3fd1dd4 xuyao xiufu master bug

